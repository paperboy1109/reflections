What happens when you initialize a repository? Why do you need to do it?

To start tracking the repository we need the .git file to exist.  Initializing the repository creates this file.  Once this is done we can make commits and start making use of the version control system.  Note that initially the files will be untracked and the result of 'git log' will not include any commits -- the user has to choose when to make commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an in-between space where files in the working directory are put before they are added to a repository.  It seems to offer value by giving one a way to do a "draft version" of the intended repository.  Remember that files are added to the staging area using 'git add'.

How can you use the staging area to make sure you have one commit per logical change?

By comparing the staging area to the working directory, and also to the current repository, you can see exactly which changes will be added to a new commit.  Adding or removing files from the staging area prior to making a new commit will allow one to only choose to commit changes that are part of a single logical change.  Other possible changes will still remain in the working directory and these can be added to the staging area (and then committed) later, reflecting a separate logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful any time experimental features were being explored.  They would help by allowing complete freedom in elaborating upon or reinventing the code while also preserving an intact, working version.

How do the diagrams help you visualize the branch structure?

Branches organize the history of git commits visually and the diagrams also reflect the terminology chosen for the git commands themselves.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging branches allows commits from both branches to be reached by the new, merged branch.  The diagram illustrates this and makes it clear that the commits in each branch will be retained.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros: doing merges manually could be incredibly time-consuming and would be necessarily so if the branches are long.  Cons: there may be merge conflicts, in which case you will have to update files manually anyway.