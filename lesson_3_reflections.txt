When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository would be ideal if you use multiple machines to do your coding.  It would also be very useful for projects that have lots of contributors.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Changes can represent incomplete progress, so it's best if the programmer decides when to sync the changes that are made.  For instance, a new feature may require a series of changes (done on a local machine), and waiting to update the remote until all the changes were present might be safer or just less confusing for anyone who might also be using the code on the remote.  Conversely, the remote may be getting updates from one or more contributors and a given user might want to wait until the updates are complete before pulling the code to his or her local machine.  

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forking is specific to GitHub.  A repository is forked from a GitHub location to one's own account within GitHub.  This allows one to work with an existing coding project, while still crediting the programmer who originally created the project.  Clones are copies of a coding project that are being managed with git.  Thus, a clone could be made on one's development machine and this would be independent of GitHub, but clones can also be made from the development machine to GitHub or vice versa.  Branches also allow one to modify a project, but are still associated with the original copy. This approach to building upon an already existing project makes most sense when the work being done is intended to enhance or further develop the original project, rather than just using the project as a starting point for something else.  With branching comes the potential for branches to be merged, so it is ideal for collaborative projects, where multiple programmers each make different contributions that ultimately combine to create the finished version.