When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository would be ideal if you use multiple machines to do your coding.  It would also be very useful for projects that have lots of contributors.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Changes can represent incomplete progress, so it's best if the programmer decides when to sync the changes that are made.  For instance, a new feature may require a series of changes (done on a local machine), and waiting to update the remote until all the changes were present might be safer or just less confusing for anyone who might also be using the code on the remote.  Conversely, the remote may be getting updates from one or more contributors and a given user might want to wait until the updates are complete before pulling the code to his or her local machine.  

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forking is specific to GitHub.  A repository is forked from a GitHub location to one's own account within GitHub.  This allows one to work with an existing coding project, while still crediting the programmer who originally created the project.  Clones are copies of a coding project that are being managed with git.  Thus, a clone could be made on one's development machine and this would be independent of GitHub, but clones can also be made from the development machine to GitHub or vice versa.  Branches also allow one to modify a project, but are still associated with the original copy. This approach to building upon an already existing project makes most sense when the work being done is intended to enhance or further develop the original project, rather than just using the project as a starting point for something else.  With branching comes the potential for branches to be merged, so it is ideal for collaborative projects, where multiple programmers each make different contributions that ultimately combine to create the finished version.

What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit comes from knowing how to handle cases where there have been changes made locally and to the remote.  In such cases, the two versions of the project are out-of-sync and knowing (locally) the last known state of the remote makes it possible to understand the ancestor relationship between the locally made updates on the one hand, and the updates on the remote.  In short, merging the two sets of changes becomes easier thanks to knowing the most recent state of "origin master."

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Now that I'm more familiar with using Git and GitHub, I'm not sure anything would be easier without version control and the tools Git makes available for making and merging updates to the code.  Rather, it is harder to track and evaluate changes from multiple users without Git and GitHub, and keeping a collection of older code files to keep track of the version history is much less efficient than just looking through a commit history in Git.  Perhaps if you had a very large repository, consisting of many files and thus requiring large downloads, it might be easier to just work on updates locally and save earlier versions of the project locally -- but this would still cut back on the ability for multiple collaborators to make individual contributions.